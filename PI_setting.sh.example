#!/bin/bash

# これはlivelynkのraspberryPI環境を構築する為のスクリプトです。
# RaspberryPIに別のホストマシンからSSHログイン後に実行します。

# ---------------------------------------------------

# 以下の変数( = 以降のXXXがある部分)にご自分の環境にあった値を入れてください。

# githubのアカウント
github_name="First-name Family-name"
github_email="username@example.com"

# コミュニティ単位で指定された ID をセットします。
community_id=LivelynkXXX
# ルーターのIDであるユニークの数値をセットします。
router_id=XXX
# 指定されたハッシュ値をセットします。
secret=XXX
# Webアプリ側にPOSTを行うurlを指定します。通常はこのままです。
post_url=https://www.livelynk.jp/inport_post/mac_address

# ---------------------------------------------------

cd
# パッケージの最新化
echo "###################################################"
echo "更新作業をします"
echo "###################################################"
sudo apt -y update
sudo apt -y upgrade
echo "###################################################"
echo "更新作業が終わりました"
echo "###################################################"

# コマンドの返答を識別して次の入力を自動的に行う
# expect vim
echo "###################################################"
echo "vimの導入と設定をします"
echo "###################################################"
sudo apt -y install expect vim

# vim の右クリックビジュアルモードを無効
echo 'set mouse-=a' >> ~/.vimrc

source ~/.vimrc
echo "###################################################"
echo "vimの導入と設定が終わりました"
echo "###################################################"

echo "###################################################"
echo "gitの設定を行います。"
echo "###################################################"
# gitの基本設定
git config --global user.name $github_name
git config --global user.email $github_email
# gitエディタを Vim に設定
git config --global core.editor 'vim -c "set fenc=utf-8"'
# パーミッション変更を無視
git config core.filemode false
# git diff に色付け
git config --global color.diff auto
git config --global color.status auto
git config --global color.branch auto
# lessの設定をutf-8に変更
echo 'export LESSCHARSET=utf-8' >> ~/.bashrc
source ~/.bashrc

echo "###################################################"
echo "各種アプリケーションのインストールを行います。"
echo "###################################################"
# 日本語IME mozc
sudo apt -y install uim uim-mozc

# arping(不要?)
sudo apt -y install arping

# bash上でjsonを扱える jq 及び jo
sudo apt -y install jq jo

# arp-scanに必要なパッケージをインストール
sudo apt -y install autoconf libpcap-dev

echo "###################################################"
echo "arp-scanのインストールと設定を行います。"
echo "###################################################"
# arp-scanをインストール
cd /tmp
git clone https://github.com/royhills/arp-scan.git
cd arp-scan
autoreconf --install
./configure
make
sudo make install

# livelynk設定ファイル env を作成
echo "###################################################"
echo "livelynk設定ファイル env を作成します"
echo "###################################################"
cd
touch /home/pi/local_mac_address_collect_post/env
chmod 744 /home/pi/local_mac_address_collect_post/env
touch /home/pi/local_mac_address_collect_post/env.forced
chmod 744 /home/pi/local_mac_address_collect_post/env.forced

# env に環境変数を書き込む
echo "###################################################"
echo "env に環境変数を書き込みます"
echo "###################################################"
cat << EOS > /home/pi/local_mac_address_collect_post/env
trigger=everytime
community_id=$community_id
router_id=$router_id
secret=$secret
post_url=$post_url
EOS

# env.forced に環境変数を書き込む
echo "###################################################"
echo "env.forced に環境変数を書き込みます"
echo "###################################################"
cat << EOS > /home/pi/local_mac_address_collect_post/env.forced
trigger=forced
community_id=$community_id
router_id=$router_id
secret=$secret
post_url=$post_url
EOS

echo "###################################################"
echo "cronの設定を行います"
echo "###################################################"

sudo chmod 777 /etc/crontab

# /etc/crontab にcronを追記
cat << EOS >> /etc/crontab
# env より環境変数を読み込んでcronを実施 前回postと同じ内容なら処理停止がなされる
*/1 * * * *  root    export \$(cat /home/pi/local_mac_address_collect_post/env | xargs); bash /home/pi/local_mac_address_collect_post/arp-scan.sh

# 定期的に強制POSTを実施するcron
*/15 * * * *  root    export \$(cat /home/pi/local_mac_address_collect_post/env.forced | xargs); bash /home/pi/local_mac_address_collect_post/arp-scan.sh

# 一日一回深夜 3:01 にリブートさせる
1 3 * * *  root    /sbin/reboot
EOS

sudo chmod 755 /etc/crontab
sudo chown root:root /etc/crontab

echo "###################################################"
echo "cron設定が完了しました"
echo "nodejs npm のインストールを開始します。"
echo "###################################################"

sudo apt-get install -y nodejs npm
sudo npm cache clean
sudo npm install npm n -g
sudo n stablecurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
sudo apt-get install -y nodejs
sudo apt-get install -y git-core libnss-mdns libavahi-compat-libdnssd-dev

echo "###################################################"
echo "nodeのバージョンを表示します。"
echo "###################################################"
node -v

echo "###################################################"
echo "npmのバージョンを表示します。"
echo "###################################################"
npm -v

mkdir /home/pi/google-home
cd /home/pi/google-home/

echo "###################################################"
echo "Livelynkスクリプトよりお知らせ"
echo "動作が停止します(google-home)と記述された行で enterキーを押し、何度か繰り返した後、最後に yes と入力してenterしてください。"
echo "###################################################"

npm init
sudo chown pi:pi /home/pi/google-home/ -R
# ここで enter 及び yes
npm install google-home-notifier
cd
# google home api の設定ファイルをバックアップした後書き換え
mv /home/pi/google-home/node_modules/google-tts-api/lib/key.js  /home/pi/google-home/node_modules/google-tts-api/lib/key.js.old
touch /home/pi/google-home/node_modules/google-tts-api/lib/key.js
# ヒアドキュメントを変数展開させない為EOFをクォートで囲む
cat << 'EOF' >> /home/pi/google-home/node_modules/google-tts-api/lib/key.js
var fetch = require('isomorphic-fetch');
var host = 'https://translate.google.com';

/**
 * Get Key from https://translate.google.com
 *
 * @param   {Number!} timeout  default is 10000ms
 * @return  Promise(key: String)
 */
module.exports = function (timeout) {
  return fetch(host, {
    timeout: timeout || 10 * 1000
  })
  .then(function (res) {
    if (res.status !== 200) {
      throw new Error('request to ' + host + ' failed, status code = ' + res.status + ' (' + res.statusText + ')');
    }
    return res.text();
  })
  .then(function (html) {
    const expressions = [
      "TKK='(\\d+.\\d+)';",
      "tkk:'(\\d+.\\d+)'"
    ];

    const matches = expressions
      .map(expr => html.match(expr))
      .filter(res => res);

    if (!matches.length) throw new Error('get key failed from google');

    return matches[0][1];
  });
};

EOF

sudo chown pi:pi /home/pi/google-home/node_modules/google-tts-api/lib/key.js

echo "###################################################"
echo "MicroSDカードのOSを書き込み禁止の状態に設定します。"
echo "###################################################"
# MicroSDを書き込み禁止のROMに設定する
# Thanks!
# https://qiita.com/felis_silv/items/e69f3490091bee9fe619

cd /home/pi
# sudo bash
sudo apt-get install -y rsync gawk busybox bindfs
sudo dphys-swapfile swapoff
sudo dphys-swapfile uninstall
sudo update-rc.d dphys-swapfile disable
sudo systemctl disable dphys-swapfile
git clone https://github.com/josepsanzcamp/root-ro.git
rsync -va root-ro/etc/initramfs-tools/* /etc/initramfs-tools/
sudo mkinitramfs -o /boot/initrd.gz
sudo -- sh -c "echo 'initramfs initrd.gz' >> /boot/config.txt"

echo "MicroSDカードのOSを書き込み禁止の状態に設定しました。"
echo ""
echo "###################################################"
echo "Livelynkスクリプトよりお知らせ"
echo "全ての設定が完了しました！"
echo "###################################################"
echo ""
echo "1, 以下のコマンドを実行してGoogleHomeの発話を確認してください。"
echo "   192.168.XX.XX 部分のIPアドレス と GoogleHome端末名 をwi-fiに設定されているのもに書き換える必要があります"
echo "   node /home/pi/local_mac_address_collect_post/GoogleHomeTalk.js '192.168.XX.XX' 'GoogleHome端末名' 'ハロー'"
echo ""
echo "2, 発話が確認できたら以下のコマンドでシャットダウンを行います。"
echo ""
echo "   shutdown now"
echo ""
echo "   シャットダウン後、モニター・キーボード・マウスの接続を外して再度電源を入れれば、滞在者の確認を行うようになります。"
echo ""
echo "3, 書き込み禁止を元に戻すには以下のコマンドを実行してください。再起動後編集が可能になります。"
echo "   sh /home/pi/local_mac_address_collect_post/write_enable.sh"
echo ""
echo "4, 再度書き込み禁止状態にするには以下のコマンドを実行してください。再起動後編集が不可能になります。"
echo "   sh /home/pi/local_mac_address_collect_post/wtite_protect.sh"
echo "###################################################"
